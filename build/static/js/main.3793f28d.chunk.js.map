{"version":3,"sources":["Footer.js","Home.js","Navbar.js","App.js","registerServiceWorker.js","index.js"],"names":["Footer","color","className","fluid","md","href","Date","getFullYear","CarouselPage","activeItem","length","showControls","showIndicators","slide","itemId","src","alt","NavbarPage","state","collapse1","collapseID","toggleCollapse","setState","prevState","toggleSingleCollapse","collapseId","id","onClick","isOpen","this","navbar","left","active","to","Component","App","Navbar","Home","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"2MA4CeA,EAzCA,WACb,OACE,eAAC,IAAD,CAAWC,MAAM,OAAOC,UAAU,uBAAlC,UACE,cAAC,IAAD,CAAcC,OAAK,EAACD,UAAU,2BAA9B,SACE,eAAC,IAAD,WACE,eAAC,IAAD,CAAQE,GAAG,IAAX,UACE,oBAAIF,UAAU,QAAd,4BACA,2GAKF,eAAC,IAAD,CAAQE,GAAG,IAAX,UACE,oBAAIF,UAAU,QAAd,mBACA,+BACE,oBAAIA,UAAU,gBAAd,SACE,mBAAGG,KAAK,KAAR,sBAEF,oBAAIH,UAAU,gBAAd,SACE,mBAAGG,KAAK,KAAR,sBAEF,oBAAIH,UAAU,gBAAd,SACE,mBAAGG,KAAK,KAAR,sBAEF,oBAAIH,UAAU,gBAAd,SACE,mBAAGG,KAAK,KAAR,iCAMV,qBAAKH,UAAU,oCAAf,SACE,eAAC,IAAD,CAAcC,OAAK,EAAnB,mBACU,IAAIG,MAAOC,cADrB,cAC+C,IAC7C,mBAAGF,KAAK,8BAAR,wCCyBKG,EA7CM,WACnB,OACE,cAAC,IAAD,CAAcN,UAAU,OAAxB,SACE,cAAC,IAAD,CACEO,WAAY,EACZC,OAAQ,EACRC,cAAc,EACdC,gBAAgB,EAChBV,UAAU,YACVW,OAAK,EANP,SAQE,eAAC,IAAD,WACE,cAAC,IAAD,CAAiBC,OAAO,IAAxB,SACE,cAAC,IAAD,UACE,qBACEZ,UAAU,gBACVa,IAAI,2DACJC,IAAI,oBAIV,cAAC,IAAD,CAAiBF,OAAO,IAAxB,SACE,cAAC,IAAD,UACE,qBACEZ,UAAU,gBACVa,IAAI,2DACJC,IAAI,qBAIV,cAAC,IAAD,CAAiBF,OAAO,IAAxB,SACE,cAAC,IAAD,UACE,qBACEZ,UAAU,gBACVa,IAAI,2DACJC,IAAI,4B,gDCaLC,E,4MAnDbC,MAAQ,CACNC,WAAW,EACXC,WAAY,I,EAGdC,eAAiB,SAACD,GAAD,OAAgB,WAC/B,EAAKE,UAAS,SAACC,GAAD,MAAgB,CAC5BH,WAAYG,EAAUH,aAAeA,EAAaA,EAAa,S,EAInEI,qBAAuB,SAACC,GACtB,EAAKH,SAAL,2BACK,EAAKJ,OADV,IAEE,CAACO,IAAc,EAAKP,MAAMO,O,4CAI9B,WAAU,IAAD,OACP,OACE,cAAC,IAAD,UACE,cAAC,IAAD,CAActB,OAAK,EAACD,UAAU,MAA9B,SACE,cAAC,IAAD,CAAWD,MAAM,kBAAjB,SACE,eAAC,IAAD,CAAcE,OAAK,EAAnB,UACE,cAAC,IAAD,kBACA,cAAC,IAAD,CACEF,MAAM,UACNyB,GAAG,aACHC,QAAS,kBAAM,EAAKH,qBAAqB,gBAE3C,cAAC,IAAD,CAAaI,OAAQC,KAAKX,MAAMC,UAAWW,QAAM,EAAjD,SACE,eAAC,IAAD,CAAcC,MAAI,EAAlB,UACE,cAAC,IAAD,CAAYC,QAAM,EAAlB,SACE,cAAC,IAAD,CAAYC,GAAG,KAAf,oBAEF,cAAC,IAAD,UACE,cAAC,IAAD,CAAYA,GAAG,KAAf,oBAEF,cAAC,IAAD,UACE,cAAC,IAAD,CAAYA,GAAG,KAAf,yC,GAxCKC,aCGVC,MAZf,WACE,OACE,sBAAKjC,UAAU,MAAf,UACI,cAACkC,EAAD,IACA,cAACC,EAAD,IACA,cAAC,EAAD,QCCFC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DA6BN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACTI,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBlC,QACf4B,UAAUC,cAAcQ,WAK1BC,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,4CAMrBC,OAAM,SAAAC,GACLH,QAAQG,MAAM,4CAA6CA,MC5DjEC,IAASC,OAAQ,cAAC,EAAD,IAAUC,SAASC,eAAe,SDUpC,WACb,GAA6C,kBAAmBjB,UAAW,CAGzE,GADkB,IAAIkB,IAAIC,GAAwBzB,OAAOC,UAC3CyB,SAAW1B,OAAOC,SAASyB,OAIvC,OAGF1B,OAAO2B,iBAAiB,QAAQ,WAC9B,IAAMtB,EAAK,UAAMoB,GAAN,sBAEN3B,EAwCX,SAAiCO,GAE/BuB,MAAMvB,GACHI,MAAK,SAAAoB,GAGkB,MAApBA,EAASC,SACuD,IAAhED,EAASE,QAAQC,IAAI,gBAAgBC,QAAQ,cAG7C3B,UAAUC,cAAc2B,MAAMzB,MAAK,SAAAC,GACjCA,EAAayB,aAAa1B,MAAK,WAC7BT,OAAOC,SAASmC,eAKpBhC,EAAgBC,MAGnBa,OAAM,WACLF,QAAQC,IACN,oEAzDAoB,CAAwBhC,GAHxBD,EAAgBC,OCxBxBiC,K","file":"static/js/main.3793f28d.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { MDBCol, MDBContainer, MDBRow, MDBFooter } from \"mdbreact\";\r\n\r\nconst Footer = () => {\r\n  return (\r\n    <MDBFooter color=\"blue\" className=\"font-small pt-4 mt-4\">\r\n      <MDBContainer fluid className=\"text-center text-md-left\">\r\n        <MDBRow>\r\n          <MDBCol md=\"6\">\r\n            <h5 className=\"title\">Footer Content</h5>\r\n            <p>\r\n              Here you can use rows and columns here to organize your footer\r\n              content.\r\n            </p>\r\n          </MDBCol>\r\n          <MDBCol md=\"6\">\r\n            <h5 className=\"title\">Links</h5>\r\n            <ul>\r\n              <li className=\"list-unstyled\">\r\n                <a href=\"#!\">Link 1</a>\r\n              </li>\r\n              <li className=\"list-unstyled\">\r\n                <a href=\"#!\">Link 2</a>\r\n              </li>\r\n              <li className=\"list-unstyled\">\r\n                <a href=\"#!\">Link 3</a>\r\n              </li>\r\n              <li className=\"list-unstyled\">\r\n                <a href=\"#!\">Link 4</a>\r\n              </li>\r\n            </ul>\r\n          </MDBCol>\r\n        </MDBRow>\r\n      </MDBContainer>\r\n      <div className=\"footer-copyright text-center py-3\">\r\n        <MDBContainer fluid>\r\n          &copy; {new Date().getFullYear()} Copyright:{\" \"}\r\n          <a href=\"https://www.mdbootstrap.com\"> MDBootstrap.com </a>\r\n        </MDBContainer>\r\n      </div>\r\n    </MDBFooter>\r\n  );\r\n};\r\n\r\nexport default Footer;\r\n","import React from \"react\";\r\nimport {\r\n  MDBCarousel,\r\n  MDBCarouselInner,\r\n  MDBCarouselItem,\r\n  MDBView,\r\n  MDBContainer,\r\n  MDBBtn,\r\n  MDBCard,\r\n  MDBCardBody,\r\n  MDBCardImage,\r\n  MDBCardTitle,\r\n  MDBCardText,\r\n  MDBCol,\r\n} from \"mdbreact\";\r\n\r\n\r\nconst CarouselPage = () => {\r\n  return (\r\n    <MDBContainer className=\"mt-4\">\r\n      <MDBCarousel\r\n        activeItem={1}\r\n        length={3}\r\n        showControls={true}\r\n        showIndicators={false}\r\n        className=\"z-depth-1\"\r\n        slide\r\n      >\r\n        <MDBCarouselInner>\r\n          <MDBCarouselItem itemId=\"1\">\r\n            <MDBView>\r\n              <img\r\n                className=\"d-block w-100\"\r\n                src=\"https://mdbootstrap.com/img/Photos/Slides/img%20(45).jpg\"\r\n                alt=\"First slide\"\r\n              />\r\n            </MDBView>\r\n          </MDBCarouselItem>\r\n          <MDBCarouselItem itemId=\"2\">\r\n            <MDBView>\r\n              <img\r\n                className=\"d-block w-100\"\r\n                src=\"https://mdbootstrap.com/img/Photos/Slides/img%20(46).jpg\"\r\n                alt=\"Second slide\"\r\n              />\r\n            </MDBView>\r\n          </MDBCarouselItem>\r\n          <MDBCarouselItem itemId=\"3\">\r\n            <MDBView>\r\n              <img\r\n                className=\"d-block w-100\"\r\n                src=\"https://mdbootstrap.com/img/Photos/Slides/img%20(47).jpg\"\r\n                alt=\"Third slide\"\r\n              />\r\n            </MDBView>\r\n          </MDBCarouselItem>\r\n        </MDBCarouselInner>\r\n      </MDBCarousel>\r\n    </MDBContainer>\r\n  );\r\n};\r\n\r\nexport default CarouselPage;\r\n","import React, { Component } from \"react\";\r\nimport {\r\n  MDBNavbar,\r\n  MDBNavbarBrand,\r\n  MDBNavbarNav,\r\n  MDBNavItem,\r\n  MDBNavLink,\r\n  MDBCollapse,\r\n  MDBContainer,\r\n  MDBHamburgerToggler,\r\n} from \"mdbreact\";\r\nimport { BrowserRouter as Router } from \"react-router-dom\";\r\n\r\nclass NavbarPage extends Component {\r\n  state = {\r\n    collapse1: false,\r\n    collapseID: \"\",\r\n  };\r\n\r\n  toggleCollapse = (collapseID) => () => {\r\n    this.setState((prevState) => ({\r\n      collapseID: prevState.collapseID !== collapseID ? collapseID : \"\",\r\n    }));\r\n  };\r\n\r\n  toggleSingleCollapse = (collapseId) => {\r\n    this.setState({\r\n      ...this.state,\r\n      [collapseId]: !this.state[collapseId],\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Router>\r\n        <MDBContainer fluid className=\"p-0\">\r\n          <MDBNavbar color=\"green lighten-4\">\r\n            <MDBContainer fluid>\r\n              <MDBNavbarBrand>HCK</MDBNavbarBrand>\r\n              <MDBHamburgerToggler\r\n                color=\"#d3531a\"\r\n                id=\"hamburger1\"\r\n                onClick={() => this.toggleSingleCollapse(\"collapse1\")}\r\n              />\r\n              <MDBCollapse isOpen={this.state.collapse1} navbar>\r\n                <MDBNavbarNav left>\r\n                  <MDBNavItem active>\r\n                    <MDBNavLink to=\"#!\">Home</MDBNavLink>\r\n                  </MDBNavItem>\r\n                  <MDBNavItem>\r\n                    <MDBNavLink to=\"#!\">Link</MDBNavLink>\r\n                  </MDBNavItem>\r\n                  <MDBNavItem>\r\n                    <MDBNavLink to=\"#!\">Profile</MDBNavLink>\r\n                  </MDBNavItem>\r\n                </MDBNavbarNav>\r\n              </MDBCollapse>\r\n            </MDBContainer>\r\n          </MDBNavbar>\r\n        </MDBContainer>\r\n      </Router>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NavbarPage;\r\n","import Footer from './Footer';\nimport Home from './Home';\nimport Navbar from './Navbar';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <Navbar />\n        <Home/>\n        <Footer />\n    </div>\n\n       \n  );\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (!isLocalhost) {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      } else {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"@fortawesome/fontawesome-free/css/all.min.css\";\r\nimport \"bootstrap-css-only/css/bootstrap.min.css\";\r\nimport \"mdbreact/dist/css/mdb.css\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\n\r\nimport registerServiceWorker from './registerServiceWorker';\r\n\r\nReactDOM.render( <App /> , document.getElementById('root'));\r\n\r\nregisterServiceWorker();"],"sourceRoot":""}